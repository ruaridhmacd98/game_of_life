{"version":3,"sources":["logo.svg","Node/Node.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isAlive","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","PathfindingVisualizer","runGame","setState","isRunning","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","event","interval","target","value","clearBoard","grid","getInitialGrid","state","mouseIsPressed","newBoard","length","neighbors","calculateNeighbors","createNode","setTimeout","dirs","i","dir","y1","x1","newGrid","getNewGridWithCellToggled","map","rowIdx","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","class","type","min","max","onChange","onClick","currentRow","push","alive","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.469428a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n\t  render() {\n\t\t      const {\n\t\t\t            col,\n\t\t\t            isAlive,\n\t\t\t            onMouseDown,\n\t\t\t            onMouseEnter,\n\t\t\t            onMouseUp,\n\t\t\t            row,\n\t\t\t          } = this.props;\n\t\t      const extraClassName = isAlive\n\t\t        ? 'node-alive'\n\t\t        : '';\n\n\t\t      return (\n\t\t\t            <div\n\t\t\t              id={`node-${row}-${col}`}\n\t\t\t              className={`node ${extraClassName}`}\n\t\t\t              onMouseDown={() => onMouseDown(row, col)}\n\t\t\t              onMouseEnter={() => onMouseEnter(row, col)}\n\t\t\t              onMouseUp={() => onMouseUp()}></div>\n\t\t\t          );\n\t\t    }\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\n\nimport './game.css';\n\nexport default class PathfindingVisualizer extends Component {\n\t  constructor() {\n\t\t      super();\n\t\t      this.state = {\n\t\t\t            grid: getInitialGrid(),\n\t\t\t            mouseIsPressed: false,\n\t\t\t      \t    interval: 100,\n\t\t\t            isRunning: false,\n\t\t\t          };\n\t\t    }\n\n\t\trunGame = () => {\n\t\t\t\tthis.setState({ isRunning: true });\n\t\t\t\tthis.runIteration();\n\t\t}\n\n\t\tstopGame = () => {\n\t\t\t  this.setState({ isRunning: false });\n\t\t\t  if (this.timeoutHandler) {\n\t\t\t\t  window.clearTimeout(this.timeoutHandler);\n\t\t\t\t  this.timeoutHandler = null;\n\t\t\t\t}\n\t\t}\n\n\t\trunIteration() {\n\t\t\tlet newBoard = getInitialGrid();\n\t\t\tfor (let row = 0; row < newBoard.length ; row++) {\n\t\t\t\t\t\tfor (let col = 0; col < newBoard[0].length; col++) {\n\t\t\t\t\t\t\t\t\t\tlet neighbors = this.calculateNeighbors(this.state.grid, col, row);\n\t\t\t\t\t\t\t\t\t\tif (this.state.grid[row][col].isAlive) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (neighbors === 2 || neighbors === 3) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewBoard[row][col] = createNode(col, row, true);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewBoard[row][col] = createNode(col, row, false);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tif (neighbors === 3) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewBoard[row][col] = createNode(col, row, true);\n\t\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\t\t  newBoard[row][col] = createNode(col, row, false);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t    }\n\t\t\t}\n\t\t\tthis.setState({ grid: newBoard });\n\t\t\tthis.timeoutHandler = window.setTimeout(() => {\n\t\t\t\t\tthis.runIteration();\n\t\t\t},\n\t\t\tthis.state.interval);\n\t\t}\n\n\t\tcalculateNeighbors(grid, col, row) {\n\t\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\t\tconst dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\t\t\t\t\t\tfor (let i = 0; i < dirs.length; i++) {\n\t\t\t\t\t\t\t\tconst dir = dirs[i];\n\t\t\t\t\t\t\t\tlet y1 = row + dir[0];\n\t\t\t\t\t\t\t\tlet x1 = col + dir[1];\n\n\t\t\t\t\t\t\t\tif (x1 >= 0 && x1 < grid[0].length && y1 >= 0 && y1 < grid.length && grid[y1][x1].isAlive) {\n\t\t\t\t\t\t\t\t\t\t\t\tneighbors++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn neighbors;\n    }\n\n\t\thandleIntervalChange = (event) => {\n\t\t\t\tthis.setState({ interval: event.target.value });\n\t\t}\n\n/*\n\t  componentDidMount() {\n\t\t      const grid = getInitialGrid();\n\t\t      this.setState({grid});\n\t\t    }\n\t\t\t\t*/\n\n\t  handleMouseDown(row, col) {\n\t\t      const newGrid = getNewGridWithCellToggled(this.state.grid, row, col);\n\t\t      this.setState({grid: newGrid, mouseIsPressed: true});\n\t\t    }\n\n\t  handleMouseEnter(row, col) {\n\t\t      if (!this.state.mouseIsPressed) return;\n\t\t      const newGrid = getNewGridWithCellToggled(this.state.grid, row, col);\n\t\t      this.setState({grid: newGrid});\n\t\t    }\n\n\t  handleMouseUp() {\n\t\t      this.setState({mouseIsPressed: false});\n\t\t    }\n\n\t\tclearBoard = () => {\n\t\t\t\t\tthis.setState({ grid: getInitialGrid() });\n\t\t}\n\n\t  render() {\n\t\t      const {grid, mouseIsPressed} = this.state;\n\n\t\t      return (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t\t\t\t\t\t\t {row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\t\t\t\t\t const {row, col, isAlive} = node;\n\t\t\t\t\t\t\t\t\t\t\t return (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tisAlive={isAlive}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trow={row}></Node>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t  <div className=\"controls\">\n\n\t\t\t\t\t\t\t\t\t<div class=\"slidecontainer\">\n\t\t\t\t\t\t\t\t\t   Change Iteration Speed\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<input type=\"range\" min=\"10\" max=\"1000\" value={this.state.interval}\n\t\t\t\t\t\t\t\t\t onChange={this.handleIntervalChange} class=\"slider\" id=\"myRange\" />\n\t\t\t\t\t\t\t\t\t<div className=\"separator\"></div>\n\t\t\t\t\t\t\t\t\t{this.state.isRunning ? <button className=\"button\" onClick={this.stopGame}>Stop</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t \t: <button className=\"button\" onClick={this.runGame}>Run</button>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t<div className=\"separator\"></div>\n\t\t\t\t\t\t\t\t\t<button className=\"button\" onClick={this.clearBoard}>Clear Board</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t    }\n}\nconst getInitialGrid = () => {\n\t  const grid = [];\n\t  for (let row = 0; row < 20; row++) {\n\t\t      const currentRow = [];\n\t\t      for (let col = 0; col < 50; col++) {\n\t\t\t            currentRow.push(createNode(col, row, false));\n\t\t\t          }\n\t\t      grid.push(currentRow);\n\t\t    }\n\t  return grid;\n};\nconst createNode = (col, row, alive) => {\n\t  return {\n\t\t      col,\n\t\t      row,\n\t\t      isAlive: alive,\n\t\t    };\n};\nconst getNewGridWithCellToggled = (grid, row, col) => {\n\t  const newGrid = grid.slice();\n\t  const node = newGrid[row][col];\n\t  const newNode = {\n\t\t      ...node,\n\t\t      isAlive: !node.isAlive,\n\t\t    };\n\t  newGrid[row][col] = newNode;\n\t  return newGrid;\n};\n","import logo from './logo.svg';\nimport './App.css';\nimport Game from './game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t  <h1>Conway's Game of Life</h1>\n\t  <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}