{"version":3,"sources":["Node/Node.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isAlive","timeDead","onMouseDown","onMouseEnter","onMouseUp","row","console","log","extraClassName","id","className","Component","PathfindingVisualizer","runGame","setState","isRunning","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","event","interval","target","value","clearBoard","grid","getInitialGrid","state","mouseIsPressed","newBoard","length","neighbors","calculateNeighbors","setTimeout","dirs","i","dir","y1","x1","newGrid","getNewGridWithCellToggled","map","rowIdx","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","class","type","min","max","onChange","onClick","currentRow","push","createNode","alive","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f535927c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n          const {\n                  col,\n                  isAlive,\n                  timeDead,\n                  onMouseDown,\n                  onMouseEnter,\n                  onMouseUp,\n                  row,\n                } = this.props;\n\t  console.log(timeDead)\n          const extraClassName = (\n            isAlive ? 'node-alive' :\n            !isAlive && timeDead === 1 ? 'node-dead1' :\n            !isAlive && timeDead === 2 ? 'node-dead2' :\n            ''\n          );\n\n          return (\n                  <div\n                    id={`node-${row}-${col}`}\n                    className={`node ${extraClassName}`}\n                    onMouseDown={() => onMouseDown(row, col)}\n                    onMouseEnter={() => onMouseEnter(row, col)}\n                    onMouseUp={() => onMouseUp()}></div>\n                );\n        }\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\n\nimport './game.css';\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n          super();\n          this.state = {\n                  grid: getInitialGrid(),\n                  mouseIsPressed: false,\n                  interval: 100,\n                  isRunning: false,\n                };\n        }\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n          window.clearTimeout(this.timeoutHandler);\n          this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n      let newBoard = getInitialGrid();\n      for (let row = 0; row < newBoard.length ; row++) {\n            for (let col = 0; col < newBoard[0].length; col++) {\n                    let neighbors = this.calculateNeighbors(this.state.grid, col, row);\n                    if (this.state.grid[row][col].isAlive) {\n                        if (neighbors === 2 || neighbors === 3) {\n                            newBoard[row][col].isAlive=true;\n                        } else {\n                            newBoard[row][col].isAlive=false;\n\t\t\t    newBoard[row][col].timeDead=1;\n                        }\n                    } else {\n                        if (neighbors === 3) {\n                            newBoard[row][col].isAlive=true;\n                        }\n                        else {\n                            newBoard[row][col].isAlive=false;\n\t\t\t    newBoard[row][col].timeDead = 1 + this.state.grid[row][col].timeDead;\n                        }\n                    }\n            }\n      }\n      this.setState({ grid: newBoard });\n      this.timeoutHandler = window.setTimeout(() => {\n          this.runIteration();\n      },\n      this.state.interval);\n    }\n\n    calculateNeighbors(grid, col, row) {\n            let neighbors = 0;\n            const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n            for (let i = 0; i < dirs.length; i++) {\n                const dir = dirs[i];\n                let y1 = row + dir[0];\n                let x1 = col + dir[1];\n\n                if (x1 >= 0 && x1 < grid[0].length && y1 >= 0 && y1 < grid.length && grid[y1][x1].isAlive) {\n                        neighbors++;\n                }\n            }\n\n            return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n/*\n    componentDidMount() {\n          const grid = getInitialGrid();\n          this.setState({grid});\n        }\n        */\n\n    handleMouseDown(row, col) {\n          const newGrid = getNewGridWithCellToggled(this.state.grid, row, col);\n          this.setState({grid: newGrid, mouseIsPressed: true});\n        }\n\n    handleMouseEnter(row, col) {\n          if (!this.state.mouseIsPressed) return;\n          const newGrid = getNewGridWithCellToggled(this.state.grid, row, col);\n          this.setState({grid: newGrid});\n        }\n\n    handleMouseUp() {\n          this.setState({mouseIsPressed: false});\n        }\n\n    clearBoard = () => {\n          this.setState({ grid: getInitialGrid() });\n    }\n\n    render() {\n          const {grid, mouseIsPressed} = this.state;\n\n          return (\n          <>\n            <div className=\"grid\">\n              {grid.map((row, rowIdx) => {\n                return (\n                    <div key={rowIdx}>\n                       {row.map((node, nodeIdx) => {\n                       const {row, col, isAlive, timeDead} = node;\n                       return (\n                          <Node\n                            key={nodeIdx}\n                            col={col}\n                            isAlive={isAlive}\n\t\t\t    timeDead={timeDead}\n                            mouseIsPressed={mouseIsPressed}\n                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                            onMouseUp={() => this.handleMouseUp()}\n                            row={row}></Node>\n                        );\n                          })}\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"controls\">\n\n                  <div class=\"slidecontainer\">\n                     Change Iteration Speed\n                  </div>\n                  <input type=\"range\" min=\"10\" max=\"1000\" value={this.state.interval}\n                   onChange={this.handleIntervalChange} class=\"slider\" id=\"myRange\" />\n                  <div className=\"separator\"></div>\n                  {this.state.isRunning ? <button className=\"button\" onClick={this.stopGame}>Stop</button>\n                            : <button className=\"button\" onClick={this.runGame}>Run</button>\n                  }\n                  <div className=\"separator\"></div>\n                  <button className=\"button\" onClick={this.clearBoard}>Clear Board</button>\n            </div>\n          </>\n        );\n        }\n}\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n          const currentRow = [];\n          for (let col = 0; col < 50; col++) {\n                  currentRow.push(createNode(col, row, false));\n                }\n          grid.push(currentRow);\n        }\n    return grid;\n};\nconst createNode = (col, row, alive) => {\n    return {\n          col,\n          row,\n          isAlive: alive,\n\t  timeDead: 20,\n        };\n};\nconst getNewGridWithCellToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n          ...node,\n          isAlive: !node.isAlive,\n        };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n","import './App.css';\nimport Game from './game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t  <h1>Conway's Game of Life</h1>\n\t  <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}